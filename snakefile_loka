# Snakefile
import os

# Config
configfile: "config.yaml"

#PRIMARY ANALYSIS-RAW DATA PROCESSING (QUALITY CONTROL AND READ ALIGNMENT)-???????????????HAVE TO SEE IF WE NEED A TYPE OF QUALITY CONTROL STEP HERE, SOMEHOW?????????????????????
# Step 1: Extract UMIs and barcodes from the reads using UMI-tools #WHAT ARE UMIS?#R: Unique molecular identifiers (UMIs) are a type of molecular barcoding that provides error correction and increased accuracy during sequencing. These molecular barcodes are short sequences used to uniquely tag each molecule in a sample library.
rule umis_extraction:
    input:
        read_1="data/raw_data.fastq"
        read_2="data/raw_data.fastq"
    output:
        read_1_extracted="data/UMIS/{sample}.fastq"
        read_2_extracted="data/UMIS/{sample}.fastq"
    shell:
        """
        umi_tools extract --bc-pattern=CCCCCCCCNNNNNNNN \
                          --stdin={input.read_1} --stdout={output.read_1_extracted} \
                          --read2-in={input.read_2} --read2-out={output.read_2_extracted}
        """

# Step 2: Align reads with STAR Alignment with reference genome GRCH38
rule align_reads:
    input:
        UMI_1="data/UMIS/{sample}.fastq"
        UMI_2="data/UMIS/{sample}.fastq"
    output:
        bam="results/alignment/{sample}_aligned.bam"
    params:
        reference_genome=config["genome_dir"]
    shell:
        """
        STAR --runThreadN 4 \
             --genomeDir {params.reference_genome} \
             --readFilesIn readFilesIn {input.UMI_1} {input.UMI_2} \
             --outFileNamePrefix results/alignment/{wildcards.sample} \ #sample is the name of the wildcard, and it can take different values depending on the input files. Snakemake replaces {wildcards.sample} with the actual sample name during the workflow execution
             --outSAMtype BAM SortedByCoordinate \
             --outSAMunmapped Within \
             --outBAMcompression 10 \
             --outSAMattributes NH HI NM MD \
             --outFilterMultimapNmax 1
        mv {wildcards.sample}Aligned.sortedByCoord.out.bam {output}
        """

# Step 3: Count UMIS and create a gene expression matrix with them
rule count_umis:
    input:
        bam = "results/alignment/{sample}_aligned.bam"
    output:
        matrix = "results/matrix/{sample}_counts.tsv"
    shell:
        """
        umi_tools count --per-gene --gene-tag=XT --per-cell --wide-format-cell-counts \
                        --stdin={input.bam} --stdout={output.matrix}
        """

###############################################################################################START OF SECONDARY ANALYSIS###############################
# Step 4: Perform secondary analysis with Seurat (R) - BOTH PRE-PROCESSING/NORMALIZE THE DATA AND PERFORM DIFFERENTIAL EXPRESSION ANALYSIS
rule seurat_analysis:
    input:
        "results/{sample}_counts.tsv"
    output:
        "results/{sample}_clustering.rds"# image with the clustering of the cells from the dataset
    script:
        "scripts/SEURAT_ANALYSIS_LOKA.R"
        

